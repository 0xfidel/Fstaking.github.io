{"version":3,"sources":["components/Footer.js","components/common/Button.js","components/common/Modal.js","hooks/useOnClickOutside.js","wallet/connectors.js","wallet/ethereum.js","components/common/ConnectModal.js","components/Header.js","components/common/Card.js","components/common/Spinner.js","pages/StakingPage.js","utils/getAddress.js","utils.js","utils/getRpcUrl.js","hooks/useContracts.js","pages/FlexibleLayout.js","App.js","index.js"],"names":["className","href","target","rel","src","alt","width","color","bgColor","showBorder","onClick","children","uppercase","cx","Modal","onClose","title","ref","useRef","handler","useEffect","listener","event","current","contains","document","addEventListener","removeEventListener","useOnClickOutside","querySelector","classList","remove","style","backgroundColor","height","top","left","zIndex","minWidth","maxWidth","injected","InjectedConnector","supportedChainIds","walletconnect","WalletConnectConnector","rpc","56","qrcode","bridge","window","ethereum","isConnected","isMetaMask","ConnectModal","props","useWeb3React","library","chainId","activate","active","error","opened","closeHandle","setError","switchNetwork","a","provider","request","method","params","code","rpcUrls","chainName","nativeCurrency","name","decimals","symbol","blockExplorerUrls","console","toString","indexOf","initNetwork","Header","str","account","deactivate","useState","undefined","setNetwork","setMessage","setSignature","setVerified","onOpen","Button","localStorage","setItem","length","substr","noLine","Spinner","animationDuration","size","borderWidth","borderTopColor","borderBottomColor","defaultProps","stakeTokenDataList","abi","MMPRO","addr","img","BUSD","HomePage","loading","setLoading","initLoading","setInitLoading","stakeLoading","setStakeLoading","unstakeLoading","setUnstakeLoading","withdrawLoading","setWithdrawLoading","web3","setWeb3","accounts","setAccounts","flexibleStakeContract","setFlexibleStakeContract","fixedStakeContract","setFixedStakeContract","Array","wishStakeContractList","setWishStakeContractList","balance","setBalance","totalStaked","setTotalStaked","stakedByUser","setStakedByUser","unstakeList","setUnstakeList","totalRewards","setTotalRewards","amount","setAmount","showModal","setShowModal","optionsState","setOptionsState","curStakeTokenID","setCurStakeTokenID","curStakeTokenInfo","setCurStakeTokenInfo","curStakeTokenContract","setCurStakeTokenContract","stakeTokenBoxList","setStakeTokenBoxList","tabIndex","setTabIndex","fixedStakingOption","setFixedStakingOption","stakingOptionState","setStakingOptionState","apy","setAPY","flexibleAPY","setFlexibleAPY","initializing","setInitializing","init","isReady","Promise","resolve","reject","Web3","enable","log","providers","HttpProvider","eth","net","getId","tempWishStakeList","i","tempStakeToken","Contract","push","tempflexibleStakeContract","FlexibleStake","tempStakeList","stakeTokenInfo","methods","tokenStakeInfo","call","id","tempfixedStakeContract","FixedStake","cAPY","tempAPY","forEach","stake","index","APY","getAccounts","initFlexibleBalance","balanceOf","tmpBalance","getUserStakes","stakedByUserArray","sumOfStaked","unstakeLists","sumTotalRewards","calcRewardsByIndex","rewards","parseInt","stakeToken","BigInt","on","initFixedBalance","getStakeOptions","tmpFixedStakeOptinos","updateAll","all","updateAccountBalance","updateTotalStaked","updateStakedByUser","updateTotalRewards","tmpStakeTokenID","tmpContract","actual","arg","fromExponential","allowance","approve","send","from","unstake","parseFloat","withdraw","withdrawEarnings","claimRewards","onSelectChanged","value","emission","shareRate","currentRewardsPerday","estAnnualRewards","initAPY","initData","initialize","minHeight","Card","background","map","stakeTokenBox","key","handleSelectCurStake","toFixed","type","placeholder","onChange","e","option","periodInDays","fixedStake","RPC_URL","getRpcUrl","timeout","App","StakingPage","Footer","baseUrl","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","getLibrary"],"mappings":"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","file":"static/js/main.841254cb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div className=\"py-8\">\r\n      <footer className=\"container mx-auto px-4 flex flex-row justify-center text-center\">\r\n        <a\r\n          href=\"https://twitter.com/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"mr-4\"\r\n        >\r\n          <img src=\"/images/sm-twitter.svg\" alt=\"\" width=\"20\" />\r\n        </a>\r\n        <a\r\n          href=\"https://t.me/#\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"mr-4\"\r\n        >\r\n          <img src=\"/images/sm-telegram.svg\" alt=\"\" width=\"20\" />\r\n        </a>\r\n        <a\r\n          href=\"#\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          className=\"mr-4\"\r\n        >\r\n          <span>v 1.0.0RC3</span>\r\n        </a>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nexport default ({\r\n  color = \"white\",\r\n  bgColor = \"primary\",\r\n  showBorder = false,\r\n  onClick,\r\n  className,\r\n  children,\r\n  uppercase = true,\r\n}) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={cx(\r\n        className,\r\n        \"rounded-md px-4 py-2 mx-1 font-Montserrat-ExtraBold\",\r\n        uppercase ? \"uppercase\" : \"\",\r\n        showBorder ? \"border\" : \"\",\r\n        \"bg-\" + bgColor,\r\n        \"hover:bg-\" + bgColor + \"-hover\",\r\n        \"hover:border-\" + bgColor + \"-hover\",\r\n        \"text-\" + color,\r\n        \"hover:text-\" + color + \"-hover\",\r\n        \"border-\" + color,\r\n        \"hover:border-\" + color + \"-hover\"\r\n      )}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\nimport useOnClickOutside from \"../../hooks/useOnClickOutside\";\n\nconst Modal = ({ children, onClose, title }) => {\n  const ref = useRef(null);\n\n  const closeModal = () => {\n    document.querySelector(\"body\").classList.remove(\"overflow-hidden\");\n    onClose();\n  };\n\n  useOnClickOutside(ref, () => {\n    closeModal();\n  });\n\n  return (\n    <div\n      className=\"fixed overflow-auto flex items-center\"\n      style={{\n        backgroundColor: \"rgba(0, 0, 0, .2)\",\n        width: \"100%\",\n        height: \"100%\",\n        top: 0,\n        left: 0,\n        zIndex: 5000,\n      }}\n    >\n      <div\n        ref={ref}\n        className=\"relative p-8 border-2 border-primary rounded-md bg-white w-full max-w-md m-auto h-custom\"\n        style={{\n          minWidth: \"300px\",\n          maxWidth: \"700px\",\n        }}\n      >\n        <div className=\"flex flex-row items-center\">\n          <div className=\"text-3xl font-bold text-black\">{title}</div>\n        </div>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import { useEffect } from \"react\";\n\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = (event) => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, handler]);\n}\n","import { InjectedConnector } from \"@web3-react/injected-connector\";\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\nimport Web3 from \"web3\";\n\n// Chain IDs\n// These are the IDs of the Ethereum chains that MetaMask supports by default. Consult chainid.network (opens new window)for more.\n// Hex\tDecimal\tNetwork\n// 0x1\t1\tEthereum Main Network (Mainnet)\n// 0x3\t3\tRopsten Test Network\n// 0x4\t4\tRinkeby Test Network\n// 0x5\t5\tGoerli Test Network\n// 0x2a\t42\tKovan Test Network\nexport const injected = new InjectedConnector({\n  supportedChainIds: [56, 97],\n});\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 56: \"https://bsc-dataseed.binance.org/\" },\n  qrcode: true,\n  bridge: \"https://bridge.walletconnect.org\",\n});\n\nexport const getLibrary = (provider) => new Web3(provider);\n","export const ethereumConnect = () =>\n  window.ethereum.request({ method: \"eth_requestAccounts\" });\nexport const isEthereumConnected = window.ethereum\n  ? window.ethereum.isConnected()\n  : false;\nexport const isEthereumMetaMask = window.ethereum\n  ? window.ethereum.isMetaMask\n  : null;\nexport const ethereumSendTransaction = (params) =>\n  window.ethereum.request({\n    method: \"eth_sendTransaction\",\n    params,\n  });\n","import React, { useEffect } from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { injected, walletconnect } from \"../../wallet\";\r\n\r\nexport default function ConnectModal(props) {\r\n  const { library, chainId, activate, active, error } = useWeb3React();\r\n  const { opened, closeHandle, setError } = props;\r\n\r\n  const switchNetwork = async () => {\r\n    try {\r\n      await library.provider.request({\r\n        method: \"wallet_switchEthereumChain\",\r\n        params: [{ chainId: \"0x38\" }],\r\n      });\r\n    } catch (switchError) {\r\n      // 4902 error code indicates the chain is missing on the wallet\r\n      if (switchError.code === 4902) {\r\n        try {\r\n          await library.provider.request({\r\n            method: \"wallet_addEthereumChain\",\r\n            params: [\r\n              {\r\n                chainId: \"0x38\",\r\n                rpcUrls: [\"https://bsc-dataseed.binance.org/\"],\r\n                chainName: \"BSC Mainnet\",\r\n                nativeCurrency: { name: \"BNB\", decimals: 18, symbol: \"BNB\" },\r\n                blockExplorerUrls: [\"https://bscscan.com/\"],\r\n              },\r\n            ],\r\n          });\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initNetwork = async () => {\r\n      setError(56 !== chainId && active);\r\n      if (error && error.toString().indexOf(\"UnsupportedChainIdError\") > -1) {\r\n        await switchNetwork();\r\n      }\r\n    };\r\n    initNetwork();\r\n  }, [active, chainId, error]);\r\n\r\n  return (\r\n    <>\r\n      {opened && (\r\n        <Modal title=\"ConnectWallet\" onClose={closeHandle}>\r\n          <div className=\"flex flex-col\">\r\n            <button\r\n              className=\"flex flex-row items-center m-1 p-1 border-black rounded-md border-solid border-2 cursor-pointer\"\r\n              onClick={() => {\r\n                activate(injected);\r\n                // setProvider(\"coinbaseWallet\");\r\n                closeHandle();\r\n              }}\r\n            >\r\n              <img\r\n                src=\"/images/wallet/metamask.svg\"\r\n                alt=\"metamask\"\r\n                width=\"50\"\r\n                height=\"50\"\r\n                className=\"mr-3\"\r\n              />\r\n              <p className=\"text-black\">Metamask</p>\r\n            </button>\r\n            <button\r\n              className=\"flex flex-row items-center m-1 p-1 border-black rounded-md border-solid border-2 cursor-pointer\"\r\n              onClick={() => {\r\n                activate(walletconnect);\r\n                // setProvider(\"coinbaseWallet\");\r\n                closeHandle();\r\n              }}\r\n            >\r\n              <img\r\n                src=\"/images/wallet/trustwallet.svg\"\r\n                alt=\"metamask\"\r\n                width=\"50\"\r\n                height=\"50\"\r\n                className=\"mr-3\"\r\n              />\r\n              <p className=\"text-black\">Wallet connect</p>\r\n            </button>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { initWeb3 } from \"../utils.js\";\r\nimport cx from \"classnames\";\r\nimport { useEffect } from \"react/cjs/react.production.min\";\r\nimport Button from \"./common/Button.js\";\r\nimport Modal from \"./common/Modal.js\";\r\nimport ConnectModal from \"./common/ConnectModal.js\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n\r\nconst Header = () => {\r\n  const { library, chainId, account, activate, deactivate, active } =\r\n    useWeb3React();\r\n  const [network, setNetwork] = useState(undefined);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [signature, setSignature] = useState(\"\");\r\n  const [verified, setVerified] = useState();\r\n  const [onOpen, onClose] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const refreshState = () => {\r\n    window.localStorage.setItem(\"provider\", undefined);\r\n    setNetwork(\"\");\r\n    setMessage(\"\");\r\n    setSignature(\"\");\r\n    setVerified(undefined);\r\n  };\r\n\r\n  const disconnect = () => {\r\n    refreshState();\r\n    deactivate();\r\n  };\r\n\r\n  function truncate(str) {\r\n    return str.length > 0\r\n      ? str.substr(0, 4) + \"...\" + str.substr(str.length - 4, str.length - 1)\r\n      : str;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <header className=\"container px-4 mx-auto py-4\">\r\n        <div className=\"flex flex-row justify-between items-center w-full\">\r\n          <div>\r\n            <a href=\"https://fstaking.github.io/\">\r\n              <img\r\n                src=\"/images/full-logo.png\"\r\n                width=\"180\"\r\n                className=\"cursor-pointer\"\r\n                alt=\"FStaking\"\r\n              />\r\n            </a>\r\n          </div>\r\n          {!active ? (\r\n            <Button\r\n              onClick={() => {\r\n                onClose(true);\r\n              }}\r\n            >\r\n              Connect Wallet\r\n            </Button>\r\n          ) : (\r\n            <Button onClick={disconnect}>{truncate(account)}</Button>\r\n          )}\r\n        </div>\r\n      </header>\r\n      <ConnectModal\r\n        opened={onOpen}\r\n        setError={setError}\r\n        closeHandle={() => {\r\n          onClose(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nexport default ({ title, className, noLine, children }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-full rounded-lg card-bg pb-4\" + (className ? className : \"\")\r\n      }\r\n    >\r\n      <div className={`text-center font-Montserrat-ExtraBold text-white text-2xl uppercase pt-3 pb-2 ${noLine ? \"\" : \"border-b border-dashed border-white\"}`}>\r\n        {title}\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./Spinner.css\";\n\nconst Spinner = ({ animationDuration, size, color }) => {\n  return (\n    <div\n      className=\"half-circle-spinner\"\n      style={{\n        height: `${size}px`,\n        width: `${size}px`,\n      }}\n    >\n      <div\n        className=\"circle circle-1\"\n        style={{\n          borderWidth: `${size / 10}px`,\n          animationDuration: `${animationDuration}ms`,\n          borderTopColor: color,\n        }}\n      />\n      <div\n        className=\"circle circle-2\"\n        style={{\n          borderWidth: `${size / 10}px`,\n          animationDuration: `${animationDuration}ms`,\n          borderBottomColor: color,\n        }}\n      />\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  animationDuration: 1000,\n  size: 40,\n  color: \"#2c6fa5\",\n};\n\nexport default Spinner;\n","/* eslint-disable no-undef */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Button from \"../components/common/Button\";\r\nimport Modal from \"../components/common/Modal\";\r\nimport Card from \"../components/common/Card\";\r\nimport Spinner from \"../components/common/Spinner\";\r\nimport { initWeb3 } from \"../utils.js\";\r\nimport FlexibleStake from \"../contracts/FlexibleStake.json\";\r\nimport MMPRO from \"../contracts/MMPRO.json\";\r\nimport BUSD from \"../contracts/Busd.json\";\r\nimport fromExponential from \"from-exponential\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport FixedStake from \"../contracts/FixedStake.json\";\r\nimport {\r\n  getFlexibleStakingAddress,\r\n  getFixedStakingAddress,\r\n  getMMProAddress,\r\n  getBUSDAddress,\r\n} from \"../utils/getAddress\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\n// import { Box, TabsContext, TabList, TabPanel, Tab } from \"@mui/material\";\r\n\r\nconst stakeTokenDataList = [\r\n  {\r\n    name: \"MMPro\",\r\n    abi: MMPRO.abi,\r\n    addr: getMMProAddress(),\r\n    img: \"/images/mmpro.png\",\r\n  },\r\n  {\r\n    name: \"Busd\",\r\n    abi: BUSD.abi,\r\n    addr: getBUSDAddress(),\r\n    img: \"/images/busd.png\",\r\n  },\r\n];\r\nconst HomePage = (props) => {\r\n  const { account, active } = useWeb3React();\r\n  const [loading, setLoading] = useState(false);\r\n  const [initLoading, setInitLoading] = useState(false);\r\n  const [stakeLoading, setStakeLoading] = useState(false);\r\n  const [unstakeLoading, setUnstakeLoading] = useState(false);\r\n  const [withdrawLoading, setWithdrawLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [web3, setWeb3] = useState();\r\n  const [accounts, setAccounts] = useState();\r\n  const [flexibleStakeContract, setFlexibleStakeContract] = useState();\r\n  const [fixedStakeContract, setFixedStakeContract] = useState();\r\n  // const [stakeToken, setStakeToken] = useState();\r\n  // const [usersStake, setUserStake] = useState();\r\n  // const [freeAmount, setFreeAmount] = useState();\r\n  // const [totalSupply, setTotalSupply] = useState();\r\n\r\n  const [wishStakeContractList, setWishStakeContractList] = useState(Array);\r\n\r\n  const [balance, setBalance] = useState(0);\r\n  const [totalStaked, setTotalStaked] = useState(0);\r\n  const [stakedByUser, setStakedByUser] = useState(0);\r\n  const [unstakeList, setUnstakeList] = useState([]);\r\n  // const [unstakeAmount, setUnstakeAmount] = useState(0);\r\n  const [totalRewards, setTotalRewards] = useState(0);\r\n  const [amount, setAmount] = useState(0);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [optionsState, setOptionsState] = useState(0);\r\n  const [curStakeTokenID, setCurStakeTokenID] = useState(-1);\r\n  const [curStakeTokenInfo, setCurStakeTokenInfo] = useState();\r\n  const [curStakeTokenContract, setCurStakeTokenContract] = useState();\r\n  const [stakeTokenBoxList, setStakeTokenBoxList] = useState(Array);\r\n  const [tabIndex, setTabIndex] = useState(1);\r\n  const [fixedStakingOption, setFixedStakingOption] = useState(Array);\r\n  const [stakingOptionState, setStakingOptionState] = useState(0);\r\n  const [apy, setAPY] = useState(\"\");\r\n  const [flexibleAPY, setFlexibleAPY] = useState(Array);\r\n  const [initializing, setInitializing] = useState(false);\r\n\r\n  const init = async () => {\r\n    if (isReady()) {\r\n      return;\r\n    }\r\n    var web3;\r\n    try {\r\n      web3 = await initWeb3();\r\n    } catch (err) {\r\n      console.error(err);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const networkId = await web3.eth.net.getId();\r\n    if (networkId !== 56) {\r\n      setError(\"Please connect BSC Network\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    var tempWishStakeList = [];\r\n    for (var i = 0; i < stakeTokenDataList.length; i++) {\r\n      const tempStakeToken = new web3.eth.Contract(\r\n        stakeTokenDataList[i][\"abi\"],\r\n        stakeTokenDataList[i][\"addr\"]\r\n      );\r\n      tempWishStakeList.push(tempStakeToken);\r\n    }\r\n\r\n    const tempflexibleStakeContract = new web3.eth.Contract(\r\n      FlexibleStake.abi,\r\n      getFlexibleStakingAddress()\r\n    );\r\n    var tempStakeList = [];\r\n    for (var i = 0; i < stakeTokenDataList.length; i++) {\r\n      var stakeTokenInfo = {};\r\n      stakeTokenInfo[\"name\"] = stakeTokenDataList[i][\"name\"];\r\n      stakeTokenInfo[\"img\"] = stakeTokenDataList[i][\"img\"];\r\n      stakeTokenInfo[\"addr\"] = stakeTokenDataList[i][\"addr\"];\r\n      stakeTokenInfo[\"TVL\"] = (\r\n        await tempflexibleStakeContract.methods\r\n          .tokenStakeInfo(stakeTokenDataList[i][\"addr\"])\r\n          .call()\r\n      )[2];\r\n      stakeTokenInfo[\"emission\"] = (\r\n        await tempflexibleStakeContract.methods\r\n          .tokenStakeInfo(stakeTokenDataList[i][\"addr\"])\r\n          .call()\r\n      )[1];\r\n      tempStakeList.push({ ...stakeTokenInfo, id: i });\r\n    }\r\n\r\n    const tempfixedStakeContract = new web3.eth.Contract(\r\n      FixedStake.abi,\r\n      getFixedStakingAddress()\r\n    );\r\n\r\n    const apy = cAPY(amount, 5000);\r\n    setAPY(apy);\r\n    let tempAPY = [];\r\n    debugger;\r\n    tempStakeList.forEach((stake, index) => {\r\n      const apy = cAPY(amount, stake[\"emission\"]);\r\n      tempAPY.push({ id: index, APY: apy });\r\n      console.log(stake, stake[\"emission\"], apy);\r\n    });\r\n    setFlexibleAPY(tempAPY);\r\n\r\n    setWeb3(web3);\r\n    setStakeTokenBoxList(tempStakeList);\r\n    setAccounts(await web3.eth.getAccounts());\r\n    setWishStakeContractList(tempWishStakeList);\r\n    setFlexibleStakeContract(tempflexibleStakeContract);\r\n    setFixedStakeContract(tempfixedStakeContract);\r\n  };\r\n\r\n  const initFlexibleBalance = async () => {\r\n    const tmpBalance = await wishStakeContractList[curStakeTokenID].methods\r\n      .balanceOf(accounts[0])\r\n      .call();\r\n    console.log(curStakeTokenID, tmpBalance);\r\n    const stakedByUserArray = await flexibleStakeContract.methods\r\n      .getUserStakes(accounts[0])\r\n      .call();\r\n    var sumOfStaked = 0;\r\n    var unstakeLists = [];\r\n    var sumTotalRewards = 0;\r\n    for (var i = 0; i < stakedByUserArray.length; i++) {\r\n      const rewards = await flexibleStakeContract.methods\r\n        .calcRewardsByIndex(accounts[0], i)\r\n        .call();\r\n      sumTotalRewards += parseInt(rewards);\r\n      if (stakedByUserArray[i].amount > 0) {\r\n        unstakeLists.push({ id: i, amount: stakedByUserArray[i].amount });\r\n      }\r\n      if (\r\n        stakedByUserArray[i].stakeToken ===\r\n        stakeTokenBoxList[curStakeTokenID].addr\r\n      ) {\r\n        sumOfStaked += parseInt(stakedByUserArray[i].amount);\r\n      }\r\n      console.log(stakedByUserArray);\r\n    }\r\n    // setTotalSupply(totalSupply);\r\n    // setFreeAmount(freeAmount);\r\n    // setStakeToken(stakeToken);\r\n    // setBalance(balance);\r\n    // setTotalStaked(totalStaked);\r\n    setBalance(BigInt(tmpBalance));\r\n    setStakedByUser(sumOfStaked);\r\n    setTotalRewards(sumTotalRewards);\r\n    setUnstakeList(unstakeLists);\r\n\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      // debugger;\r\n      if (accounts.length > 0) {\r\n        setAccounts(accounts);\r\n      } else {\r\n        setAccounts(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  const initFixedBalance = async () => {\r\n    debugger;\r\n    const tmpFixedStakeOptinos = await fixedStakeContract.methods\r\n      .getStakeOptions(getMMProAddress())\r\n      .call();\r\n    const tmpBalance = await wishStakeContractList[0].methods\r\n      .balanceOf(accounts[0])\r\n      .call();\r\n    const stakedByUserArray = await flexibleStakeContract.methods\r\n      .getUserStakes(accounts[0])\r\n      .call();\r\n    var sumOfStaked = 0;\r\n    var unstakeLists = [];\r\n    var sumTotalRewards = 0;\r\n    for (var i = 0; i < stakedByUserArray.length; i++) {\r\n      sumTotalRewards += stakedByUserArray[i].rewards;\r\n      if (stakedByUserArray[i].amount > 0) {\r\n        unstakeLists.push({ id: i, amount: stakedByUserArray[i].amount });\r\n      }\r\n      if (stakedByUserArray[i].stakeToken === getMMProAddress()) {\r\n        sumOfStaked += parseInt(stakedByUserArray[i].amount);\r\n      }\r\n    }\r\n    // setTotalSupply(totalSupply);\r\n    // setFreeAmount(freeAmount);\r\n    // setStakeToken(stakeToken);\r\n    // setBalance(balance);\r\n    // setTotalStaked(totalStaked);\r\n    setFixedStakingOption(tmpFixedStakeOptinos);\r\n    setBalance(tmpBalance);\r\n    setStakedByUser(sumOfStaked);\r\n    setTotalRewards(sumTotalRewards);\r\n    setUnstakeList(unstakeLists);\r\n\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      // debugger;\r\n      if (accounts.length > 0) {\r\n        setAccounts(accounts);\r\n      } else {\r\n        setAccounts(null);\r\n      }\r\n    });\r\n  };\r\n\r\n  const isReady = () => {\r\n    return !!flexibleStakeContract && !!web3 && !!accounts;\r\n  };\r\n\r\n  async function updateAll() {\r\n    await Promise.all([\r\n      updateAccountBalance(),\r\n      updateTotalStaked(),\r\n      updateStakedByUser(),\r\n      updateTotalRewards(),\r\n    ]);\r\n  }\r\n\r\n  async function updateStakedByUser() {\r\n    var sumOfStaked = 0;\r\n    var stakedByUserArray;\r\n    const tmpStakeTokenID = tabIndex === 1 ? curStakeTokenID : 0;\r\n    if (tabIndex === 1) {\r\n      stakedByUserArray = await flexibleStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n    } else if (tabIndex === 2) {\r\n      stakedByUserArray = await fixedStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n    }\r\n    for (var i = 0; i < stakedByUserArray.length; i++) {\r\n      if (\r\n        stakedByUserArray[i].stakeToken ===\r\n        stakeTokenBoxList[tmpStakeTokenID].addr\r\n      ) {\r\n        sumOfStaked += parseInt(stakedByUserArray[i].amount);\r\n      }\r\n    }\r\n    setStakedByUser(sumOfStaked);\r\n    return sumOfStaked;\r\n  }\r\n\r\n  async function updateTotalRewards() {\r\n    var sumTotalRewards = 0;\r\n    var unstakeLists = [];\r\n    var stakedByUserArray;\r\n    if (flexibleStakeContract && tabIndex === 1) {\r\n      stakedByUserArray = await flexibleStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n      for (var i = 0; i < stakedByUserArray.length; i++) {\r\n        const rewards = await flexibleStakeContract.methods\r\n          .calcRewardsByIndex(accounts[0], i)\r\n          .call();\r\n        sumTotalRewards = parseInt(sumTotalRewards) + parseInt(rewards);\r\n\r\n        if (stakedByUserArray[i].amount > 0) {\r\n          unstakeLists.push({\r\n            id: i,\r\n            amount: stakedByUserArray[i].amount,\r\n          });\r\n        }\r\n      }\r\n      // return sumTotalRewards;\r\n    } else if (fixedStakeContract && tabIndex === 2) {\r\n      stakedByUserArray = await fixedStakeContract.methods\r\n        .getUserStakes(accounts[0])\r\n        .call();\r\n      for (i = 0; i < stakedByUserArray.length; i++) {\r\n        sumTotalRewards =\r\n          parseInt(sumTotalRewards) + parseInt(stakedByUserArray[i].rewards);\r\n\r\n        if (stakedByUserArray[i].amount > 0) {\r\n          unstakeLists.push({\r\n            id: i,\r\n            amount: stakedByUserArray[i].amount,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    setUnstakeList(unstakeLists);\r\n    setTotalRewards(sumTotalRewards);\r\n  }\r\n\r\n  async function updateAccountBalance() {\r\n    var balance;\r\n    const tmpContract = wishStakeContractList[curStakeTokenID];\r\n    if (tmpContract && tabIndex === 1) {\r\n      balance = await tmpContract.methods.balanceOf(accounts[0]).call();\r\n    } else if (tabIndex === 2) {\r\n      balance = await wishStakeContractList[0].methods\r\n        .balanceOf(accounts[0])\r\n        .call();\r\n    }\r\n    setBalance(BigInt(balance));\r\n    return balance;\r\n  }\r\n\r\n  async function updateTotalStaked() {\r\n    if (flexibleStakeContract && tabIndex === 1) {\r\n      const totalStaked = (\r\n        await flexibleStakeContract.methods\r\n          .tokenStakeInfo(stakeTokenBoxList[curStakeTokenID][\"addr\"])\r\n          .call()\r\n      )[2];\r\n      setTotalStaked(BigInt(totalStaked));\r\n      return totalStaked;\r\n    }\r\n  }\r\n\r\n  async function stake() {\r\n    setStakeLoading(true);\r\n    const actual = amount * 10 ** 18;\r\n    const arg = fromExponential(actual);\r\n    try {\r\n      const allowance = await curStakeTokenContract.methods\r\n        .allowance(accounts[0], getFlexibleStakingAddress())\r\n        .call();\r\n      if (BigInt(allowance) < BigInt(arg)) {\r\n        await curStakeTokenContract.methods\r\n          .approve(getFlexibleStakingAddress(), arg)\r\n          .send({ from: accounts[0] });\r\n      }\r\n      console.log(\r\n        allowance,\r\n        arg,\r\n        BigInt(allowance) < BigInt(arg),\r\n        flexibleStakeContract,\r\n        curStakeTokenInfo[\"addr\"],\r\n        arg,\r\n        accounts[0]\r\n      );\r\n      await flexibleStakeContract.methods\r\n        .stake(curStakeTokenInfo[\"addr\"], arg)\r\n        .send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setStakeLoading(false);\r\n  }\r\n\r\n  async function fixedStake() {\r\n    debugger;\r\n    setStakeLoading(true);\r\n    const actual = amount * 10 ** 18;\r\n    const arg = fromExponential(actual);\r\n    try {\r\n      const allowance = await wishStakeContractList[0].methods\r\n        .allowance(accounts[0], getFixedStakingAddress())\r\n        .call();\r\n      if (allowance < arg) {\r\n        await wishStakeContractList[0].methods\r\n          .approve(getFixedStakingAddress(), arg)\r\n          .send({ from: accounts[0] });\r\n      }\r\n      console.log(fixedStakeContract);\r\n      await fixedStakeContract.methods\r\n        .stake(stakeTokenBoxList[0].addr, arg, stakingOptionState)\r\n        .send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setStakeLoading(false);\r\n  }\r\n\r\n  async function unstake() {\r\n    if (parseFloat(stakedByUser) === 0) {\r\n      console.error(\"You don't have any staked LEADs yet!\");\r\n      return;\r\n    }\r\n    setUnstakeLoading(true);\r\n    if (tabIndex === 2) {\r\n      return;\r\n    }\r\n    try {\r\n      // const _userStake = await flexibleStake.methods\r\n      //   .getUserStakes(accounts[0])\r\n      //   .call();\r\n      // const count = _userStake.length;\r\n      await flexibleStakeContract.methods\r\n        .withdraw(optionsState)\r\n        .send({ from: accounts[0] });\r\n      await updateAll();\r\n    } catch (err) {\r\n      if (err.code !== 4001) {\r\n        setShowModal(true);\r\n      }\r\n      console.error(err);\r\n    }\r\n    setUnstakeLoading(false);\r\n  }\r\n\r\n  async function withdrawEarnings() {\r\n    if (parseFloat(totalRewards) === 0) {\r\n      console.error(\"No earnings yet!\");\r\n      return;\r\n    }\r\n    setWithdrawLoading(true);\r\n    if (tabIndex === 1) {\r\n      try {\r\n        const length = unstakeList.length;\r\n        for (var i = 0; i < length; i++) {\r\n          await flexibleStakeContract.methods\r\n            .claimRewards(unstakeList[i][\"id\"])\r\n            .send({ from: accounts[0] });\r\n        }\r\n        await updateAll();\r\n      } catch (err) {\r\n        if (err.code !== 4001) {\r\n          setShowModal(true);\r\n        }\r\n        console.error(err);\r\n      }\r\n    } else if (tabIndex === 2) {\r\n      try {\r\n        debugger;\r\n        const length = unstakeList.length;\r\n        for (var i = 0; i < length; i++) {\r\n          await fixedStakeContract.methods\r\n            .withdraw(getMMProAddress(), unstakeList[i][\"id\"])\r\n            .send({ from: accounts[0] });\r\n        }\r\n        await updateAll();\r\n      } catch (err) {\r\n        if (err.code !== 4001) {\r\n          setShowModal(true);\r\n        }\r\n        console.error(err);\r\n      }\r\n    }\r\n    setWithdrawLoading(false);\r\n  }\r\n\r\n  const handleSelectCurStake = (index) => {\r\n    setCurStakeTokenID(index);\r\n  };\r\n\r\n  const onSelectChanged = (event) => {\r\n    setOptionsState(event.target.value);\r\n  };\r\n\r\n  const onStakeOptionSelectChanged = (e) => {\r\n    setStakingOptionState(e.target.value);\r\n  };\r\n\r\n  const cAPY = (amount, emission) => {\r\n    if (totalStaked && amount) {\r\n      const shareRate = BigInt(amount * 100) / (totalStaked + BigInt(amount));\r\n      const currentRewardsPerday =\r\n        (BigInt(shareRate) * BigInt(emission)) / BigInt(100);\r\n      const estAnnualRewards = BigInt(currentRewardsPerday) * BigInt(365);\r\n      const apy = (BigInt(estAnnualRewards) * BigInt(100)) / BigInt(amount);\r\n      return apy.toString() + \"%\";\r\n    }\r\n    return \"0%\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initData = async () => {\r\n      setInitializing(true);\r\n      if (isReady()) {\r\n        setInitLoading(true);\r\n        if (curStakeTokenID !== -1) {\r\n          setCurStakeTokenContract(wishStakeContractList[curStakeTokenID]);\r\n          setCurStakeTokenInfo(stakeTokenBoxList[curStakeTokenID]);\r\n        }\r\n        if (tabIndex === 1 && curStakeTokenID !== -1) {\r\n          await initFlexibleBalance();\r\n          await updateAll();\r\n        } else if (tabIndex === 2) {\r\n          await initFixedBalance();\r\n          await updateAll();\r\n        }\r\n        initAPY();\r\n        setInitLoading(false);\r\n      }\r\n      setInitializing(false);\r\n    };\r\n    initData();\r\n  }, [curStakeTokenID, tabIndex, web3, accounts]);\r\n\r\n  // useEffect(() => {\r\n  //   const init = async () => {\r\n  //     if (tabIndex === 1) {\r\n  //       await initFlexibleBalance();\r\n  //     } else {\r\n  //       await initFixedBalance();\r\n  //     }\r\n  //   };\r\n  //   init();\r\n  // }, [tabIndex]);\r\n\r\n  function initAPY() {\r\n    debugger;\r\n    const apy = cAPY(amount, 5000);\r\n    setAPY(apy);\r\n    let tempAPY = [];\r\n    console.log(stakeTokenBoxList);\r\n    stakeTokenBoxList.forEach((stake, index) => {\r\n      const apy = cAPY(amount, stake[\"emission\"]);\r\n      tempAPY.push({ id: index, APY: apy });\r\n      console.log(stake, stake[\"emission\"], apy);\r\n    });\r\n    setFlexibleAPY(tempAPY);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const initialize = async (active) => {\r\n      setLoading(true);\r\n      if (active) {\r\n        await init();\r\n      }\r\n      setLoading(false);\r\n    };\r\n    initialize(active);\r\n  }, [account, active]);\r\n\r\n  useEffect(() => {\r\n    initAPY();\r\n  }, [amount]);\r\n\r\n  return (\r\n    <div style={{ minHeight: \"1000px\" }}>\r\n      {showModal && (\r\n        <Modal title=\"\" onClose={() => setShowModal(false)}>\r\n          <div className=\"text-2xl mb-2\">\r\n            Error! Your transaction has been reverted!\r\n          </div>\r\n          <div>1. Please check your account and retry again...</div>\r\n          <div>2. Your referrer's address is a registered member if any</div>\r\n\r\n          <div className=\"my-2\">\r\n            Thanks for your support and feel free to{\" \"}\r\n            <a\r\n              href=\"https://www.leadwallet.io/contact\"\r\n              className=\"text-blue-500\"\r\n            >\r\n              contact us\r\n            </a>\r\n          </div>\r\n\r\n          <div className=\"flex flex-row justify-center\">\r\n            <Button onClick={() => setShowModal(false)}>Close</Button>\r\n          </div>\r\n        </Modal>\r\n      )}\r\n      <div className=\"relative w-full z-30\">\r\n        <div className=\"container mx-auto pb-18 px-4 force-height\">\r\n          {!active && (\r\n            <div className=\"w-full py-6 text-center\">\r\n              {/* <dov className=\"flex flex-row justify-around\"> */}\r\n              <div className=\"flex items-center justify-center md:flex-row w-full mb-24 mt-6 flex-col\">\r\n                <div className=\"text-left\">\r\n                  <p className=\"text-6xl mb-2 font-semibold\">Launchpad</p>\r\n                  <p className=\"text-2xl mb-2 font-light\">\r\n                    {\" \"}\r\n                    Connect your wallet &amp; Participate in IDO on MMPRO\r\n                    Launchpad. For allocation you need to have MMPRO token.{\" \"}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <div className=\"transparentCard justify-between w-60 md:w-80 ml-13\">\r\n                    <h1> MMPRO price</h1>\r\n                    <div className=\"flex items-center justify-center flex-row\">\r\n                      <p> 0.1321</p>\r\n                      <h1> USD </h1>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"transparentCard justify-between w-60 md:w-80 ml-13\">\r\n                    <h1> MMPRO marketcap</h1>\r\n                    <div className=\"flex items-center justify-center flex-row\">\r\n                      <p> 13.1m</p>\r\n                      <h1> USD </h1>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"transparentCard justify-between w-60 md:w-80 ml-13\">\r\n                    <h1> MMPRO supply</h1>\r\n                    <div className=\"flex items-center justify-center flex-row\">\r\n                      <p> 99.50m</p>\r\n                      <h1> MMPRO </h1>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* <Button\r\n                className=\"w-full md:w-2/5 text-2xl flex flex-row justify-center mx-auto\"\r\n                uppercase={false}\r\n                onClick={async () => await init()}\r\n              >\r\n                {loading && <Spinner color=\"white\" size={40} />}\r\n                {!loading && (error !== \"\" ? error : \"CONNECT METAMASK WALLET\")}\r\n              </Button> */}\r\n\r\n              <div className=\"text-white text-center mt-6 text-base sm:text-lg md:text-xl lg:text-2xl xl:text-3xl font-bold\">\r\n                <h1>Stake Your Token</h1>\r\n              </div>\r\n              <div className=\"w-full md:w-3/6 justify-center mx-auto mt-6\">\r\n                <Card title=\"Rules\">\r\n                  <div className=\"flex flex-col pt-8 pb-4 text-white text-center\">\r\n                    <ul>\r\n                      <li>1. Connect your MetaMask wallet to participate</li>\r\n                      <li>\r\n                        2. Stake tokens and earn daily returns from allocated\r\n                        pool\r\n                      </li>\r\n                      <li>3. Withdraw earned rewards anytime</li>\r\n                      <li>4. Unstake tokens anytime</li>\r\n                      <li>5. Earn extra rewards by referring new members</li>\r\n                    </ul>\r\n                  </div>\r\n                </Card>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* <Box>\r\n            <TabsContext value={tabIndex}>\r\n              <TabList\r\n                onChange={handleTabChange}\r\n                aria-label=\"lab API tabs example\"\r\n              >\r\n                <Tab label=\"Flexible Staking\" value=\"1\" />\r\n                <Tab label=\"Fixed Staking\" value=\"2\" />\r\n              </TabList>\r\n            </TabsContext>\r\n          </Box> */}\r\n          {active && loading && (\r\n            <div className=\"flex justify-center\">\r\n              <Spinner size={50} />\r\n            </div>\r\n          )}\r\n          {active && !loading && (\r\n            <>\r\n              <div>\r\n                <div\r\n                  className=\"w-full mx-0 h-12 my-4 shadow rounded font-bold\"\r\n                  style={{ background: \"rgba(255, 255, 255, 0.15)\" }}\r\n                >\r\n                  <ul className=\"flex border-b md:px-5\">\r\n                    <li\r\n                      onClick={() => setTabIndex(1)}\r\n                      className={\r\n                        tabIndex === 1\r\n                          ? \"text-sm border-primary pt-3 rounded-t text-primary md:mr-12 mr-1 cursor-default\"\r\n                          : \"text-sm text-white py-3 flex items-center md:mr-12 mr-1 hover:text-primary cursor-pointer\"\r\n                      }\r\n                    >\r\n                      <div className=\"flex items-center mb-3\">\r\n                        Flexible Stake\r\n                      </div>\r\n                      {tabIndex === 1 && (\r\n                        <div className=\"w-full h-1 bg-primary rounded-t-md\" />\r\n                      )}\r\n                    </li>\r\n                    <li\r\n                      onClick={() => setTabIndex(2)}\r\n                      className={\r\n                        tabIndex === 2\r\n                          ? \"text-sm border-primary pt-3 rounded-t text-primary md:mr-12 mr-1 cursor-default\"\r\n                          : \"text-sm text-white py-3 flex items-center md:mr-12 mr-1 hover:text-primary cursor-pointer\"\r\n                      }\r\n                    >\r\n                      <div className=\"flex items-center mb-3\">\r\n                        Fixed Stake ({apy})\r\n                      </div>\r\n                      {tabIndex === 2 && (\r\n                        <div className=\"w-full h-1 bg-primary rounded-t-md\" />\r\n                      )}\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n              <div className=\"transparentCard justify-center\">\r\n                {stakeTokenBoxList.length > 0 &&\r\n                  curStakeTokenID === -1 &&\r\n                  tabIndex === 1 &&\r\n                  !initializing && (\r\n                    <div className=\"grid grid-col-1 md:gap-6 gap-2 w-full\">\r\n                      {/* className=\"transparentCard justify-between w-auto mx-12\" */}\r\n                      <div className=\"text-center\">\r\n                        <span className=\"text-white text-2xl\">\r\n                          Please select one!\r\n                        </span>\r\n                        {stakeTokenBoxList.map((stakeTokenBox, index) => (\r\n                          <div\r\n                            key={index}\r\n                            className=\"flex justify-between w-auto md:mx-12 mx-1 my-2 rounded-lg card-bg py-4 md:px-8 px-1\"\r\n                          >\r\n                            <div className=\"flex justify-start\">\r\n                              <img\r\n                                src={stakeTokenBox[\"img\"]}\r\n                                width=\"60\"\r\n                                alt={stakeTokenBox[\"name\"]}\r\n                              />\r\n                              <div className=\"flex flex-col md:mx-4 mx-1\">\r\n                                <div className=\"flex flex-row justify-between\">\r\n                                  <div className=\"font-extrabold\">\r\n                                    {stakeTokenBox[\"name\"]}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"flex flex-row justify-between\">\r\n                                  <div>TVL: </div>\r\n                                  <div className=\"font-black\">\r\n                                    {stakeTokenBox[\"TVL\"] / 1000000000000000000}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"flex flex-row justify-between\">\r\n                                  <div>APY: </div>\r\n                                  <div className=\"font-extrabold\">\r\n                                    {flexibleAPY[index][\"APY\"]}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <Button onClick={() => handleSelectCurStake(index)}>\r\n                              Stake\r\n                            </Button>\r\n                          </div>\r\n                        ))}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                {curStakeTokenID !== -1 &&\r\n                  initLoading === false &&\r\n                  tabIndex === 1 &&\r\n                  !initializing && (\r\n                    <div className=\"grid grid-col-1 md:grid-cols-2 gap-6 mt-10 w-full\">\r\n                      <Card title=\"Your / Total Staked MMPRO\">\r\n                        <div className=\"flex flex-col pt-8 pb-4 text-white\">\r\n                          <div className=\"text-center\">\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              Yours\r\n                            </span>\r\n                            <span className=\"text-white text-5xl\">\r\n                              {parseFloat(\r\n                                BigInt(stakedByUser) /\r\n                                  BigInt(1000000000000000000)\r\n                              ).toFixed(2)}\r\n                            </span>\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              MMPRO\r\n                            </span>\r\n                            <br />\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              Total\r\n                            </span>\r\n                            <span className=\"text-white text-5xl\">\r\n                              {parseFloat(\r\n                                BigInt(totalStaked) /\r\n                                  BigInt(1000000000000000000)\r\n                              ).toFixed(2)}\r\n                            </span>\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              MMPRO\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"text-center\">\r\n                            {parseFloat(\r\n                              (parseFloat(totalStaked) /\r\n                                parseFloat(balance.toString())) *\r\n                                parseInt(100)\r\n                            ).toFixed(5)}\r\n                            %\r\n                          </div>\r\n                          <div className=\"text-center\">of total supply</div>\r\n                        </div>\r\n                      </Card>\r\n\r\n                      <Card title=\"Your Earnings\">\r\n                        <div className=\"flex flex-col pt-8 px-2\">\r\n                          <div className=\"text-center pb-8\">\r\n                            <span className=\"text-white text-5xl\">\r\n                              {parseFloat(\r\n                                totalRewards / 1000000000000000000\r\n                              ).toFixed(2)}\r\n                            </span>\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              MMPRO\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"flex flex-row justify-center\">\r\n                            <Button\r\n                              type=\"submit\"\r\n                              className=\"flex flex-row items-center justify-center w-48\"\r\n                              onClick={() => withdrawEarnings()}\r\n                            >\r\n                              {withdrawLoading ? (\r\n                                <Spinner size={30} />\r\n                              ) : (\r\n                                <>\r\n                                  <img\r\n                                    src=\"/images/unlocked.svg\"\r\n                                    width=\"25\"\r\n                                    alt=\"\"\r\n                                  />\r\n                                  <span className=\"w-32\">CLAIM ALL</span>{\" \"}\r\n                                </>\r\n                              )}\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </Card>\r\n\r\n                      <Card title=\"Staking\">\r\n                        <div className=\"flex flex-col pt-8 px-2\">\r\n                          <div className=\"text-center pb-4\">\r\n                            <span className=\"text-lg text-gray-400\">\r\n                              Available amount:{\" \"}\r\n                            </span>\r\n                            <span className=\"text-white text-3xl\">\r\n                              {BigInt(\r\n                                BigInt(balance) / BigInt(1000000000000000000)\r\n                              ).toString()}\r\n                            </span>\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              MMPRO\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                            <input\r\n                              type=\"number\"\r\n                              placeholder=\"MMPRO To Stake\"\r\n                              value={amount}\r\n                              onChange={(e) => setAmount(e.target.value)}\r\n                              className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                            />\r\n                            <Button\r\n                              onClick={() => stake()}\r\n                              className=\"flex flex-row items-center justify-center\"\r\n                            >\r\n                              {stakeLoading ? (\r\n                                <Spinner size={30} />\r\n                              ) : (\r\n                                <>\r\n                                  <img\r\n                                    src=\"/images/locked.svg\"\r\n                                    width=\"25\"\r\n                                    alt=\"\"\r\n                                  />\r\n                                  <span className=\"w-48\">APPROVE & STAKE</span>{\" \"}\r\n                                </>\r\n                              )}\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </Card>\r\n\r\n                      <Card title=\"Unstaking\">\r\n                        <div className=\"flex flex-col pt-8 px-2\">\r\n                          <div className=\"text-center pb-4\">\r\n                            <span className=\"text-lg text-gray-400\">\r\n                              Available to unstake:{\" \"}\r\n                            </span>\r\n                            <span className=\"text-white text-3xl\">\r\n                              {(\r\n                                parseFloat(stakedByUser) / 1000000000000000000\r\n                              ).toFixed(2)}\r\n                            </span>\r\n                            <span className=\"text-white text-2xl ml-2\">\r\n                              MMPRO\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                            <select\r\n                              value={optionsState}\r\n                              onChange={onSelectChanged}\r\n                              className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                            >\r\n                              {unstakeList.map((unstake) => (\r\n                                <option key={unstake.id} value={unstake.id}>\r\n                                  {parseFloat(\r\n                                    unstake.amount / 1000000000000000000\r\n                                  )}\r\n                                  {/* {unstake.amount} */}\r\n                                </option>\r\n                              ))}\r\n                              ;\r\n                            </select>\r\n                            {/* <input\r\n                      type=\"number\"\r\n                      placeholder=\"MMPRO To Unstake\"\r\n                      value={unstakeAmount}\r\n                      onChange={(e) => setUnstakeAmount(e.target.value)}\r\n                      className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                    /> */}\r\n                            <Button\r\n                              onClick={() => unstake()}\r\n                              className=\"flex flex-row items-center w-48 justify-center\"\r\n                            >\r\n                              {unstakeLoading ? (\r\n                                <Spinner size={30} />\r\n                              ) : (\r\n                                <>\r\n                                  <img\r\n                                    src=\"/images/unlocked.svg\"\r\n                                    width=\"25\"\r\n                                    alt=\"\"\r\n                                  />\r\n                                  <span className=\"w-36\">UNSTAKE ALL</span>\r\n                                </>\r\n                              )}\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </Card>\r\n                    </div>\r\n                  )}\r\n                {initLoading === false && tabIndex === 2 && (\r\n                  <div className=\"grid grid-col-1 md:grid-cols-2 gap-6 mt-10 w-full\">\r\n                    <Card title=\"Your / Total Staked MMPRO\">\r\n                      <div className=\"flex flex-col pt-8 pb-4 text-white\">\r\n                        <div className=\"text-center\">\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            Yours\r\n                          </span>\r\n                          <span className=\"text-white text-5xl\">\r\n                            {parseFloat(\r\n                              BigInt(stakedByUser) / BigInt(1000000000000000000)\r\n                            ).toFixed(2)}\r\n                          </span>\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            MMPRO\r\n                          </span>\r\n                          <br />\r\n                          {/* <span className=\"text-white text-2xl ml-2\">\r\n                            Total\r\n                          </span>\r\n                          <span className=\"text-white text-5xl\">\r\n                            {parseFloat(totalStaked).toFixed(2)}\r\n                          </span>\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            MMPRO\r\n                          </span> */}\r\n                        </div>\r\n                        {/* <div className=\"text-center\">\r\n                          {(\r\n                            parseFloat(\r\n                              parseFloat(totalStaked) / parseFloat(balance)\r\n                            ) * 100\r\n                          ).toFixed(5)}\r\n                          %\r\n                        </div>\r\n                        <div className=\"text-center\">of total supply</div> */}\r\n                      </div>\r\n                    </Card>\r\n\r\n                    <Card title=\"Your Earnings\">\r\n                      <div className=\"flex flex-col pt-8 px-2\">\r\n                        <div className=\"text-center pb-8\">\r\n                          <span className=\"text-white text-5xl\">\r\n                            {parseFloat(\r\n                              totalRewards / 1000000000000000000\r\n                            ).toFixed(2)}\r\n                          </span>\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            MMPRO\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"flex flex-row justify-center\">\r\n                          <Button\r\n                            type=\"submit\"\r\n                            className=\"flex flex-row items-center justify-center w-48\"\r\n                            onClick={() => withdrawEarnings()}\r\n                          >\r\n                            {withdrawLoading ? (\r\n                              <Spinner size={30} />\r\n                            ) : (\r\n                              <>\r\n                                <img\r\n                                  src=\"/images/unlocked.svg\"\r\n                                  width=\"25\"\r\n                                  alt=\"\"\r\n                                />\r\n                                <span className=\"w-32\">CLAIM ALL</span>{\" \"}\r\n                              </>\r\n                            )}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Card>\r\n\r\n                    <Card title=\"Staking\">\r\n                      <div className=\"flex flex-col pt-8 px-2\">\r\n                        <div className=\"text-center pb-4\">\r\n                          <span className=\"text-lg text-gray-400\">\r\n                            Available amount:{\" \"}\r\n                          </span>\r\n                          <span className=\"text-white text-3xl\">\r\n                            {parseInt(\r\n                              BigInt(balance) / BigInt(1000000000000000000)\r\n                            )}\r\n                          </span>\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            MMPRO\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"rounded-md border-2 border-primary p-2 my-2 flex justify-between items-center\">\r\n                          <select\r\n                            value={stakingOptionState}\r\n                            onChange={onStakeOptionSelectChanged}\r\n                            className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                          >\r\n                            {fixedStakingOption.map((option, index) => (\r\n                              <option key={index} value={index}>\r\n                                Option {index + 1} :\r\n                                {parseFloat(option.periodInDays)}\r\n                              </option>\r\n                            ))}\r\n                            ;\r\n                          </select>\r\n                        </div>\r\n                        <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                          <input\r\n                            type=\"number\"\r\n                            placeholder=\"MMPRO To Stake\"\r\n                            value={amount}\r\n                            onChange={(e) => setAmount(e.target.value)}\r\n                            className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                          />\r\n                          <Button\r\n                            onClick={() => fixedStake()}\r\n                            className=\"flex flex-row items-center justify-center\"\r\n                          >\r\n                            {stakeLoading ? (\r\n                              <Spinner size={30} />\r\n                            ) : (\r\n                              <>\r\n                                <img\r\n                                  src=\"/images/locked.svg\"\r\n                                  width=\"25\"\r\n                                  alt=\"\"\r\n                                />\r\n                                <span className=\"w-48\">APPROVE & STAKE</span>{\" \"}\r\n                              </>\r\n                            )}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Card>\r\n\r\n                    <Card title=\"Unstaking\">\r\n                      <div className=\"flex flex-col pt-8 px-2\">\r\n                        <div className=\"text-center pb-4\">\r\n                          <span className=\"text-lg text-gray-400\">\r\n                            Available to unstake:{\" \"}\r\n                          </span>\r\n                          <span className=\"text-white text-3xl\">\r\n                            {(\r\n                              parseFloat(stakedByUser) / 1000000000000000000\r\n                            ).toFixed(2)}\r\n                          </span>\r\n                          <span className=\"text-white text-2xl ml-2\">\r\n                            MMPRO\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"rounded-md border-2 border-primary p-2 flex justify-between items-center\">\r\n                          <select\r\n                            value={optionsState}\r\n                            onChange={onSelectChanged}\r\n                            className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                          >\r\n                            {unstakeList.map((unstake) => (\r\n                              <option key={unstake.id} value={unstake.id}>\r\n                                {parseFloat(\r\n                                  unstake.amount / 1000000000000000000\r\n                                ).toFixed(2)}\r\n                                {/* {unstake.amount} */}\r\n                              </option>\r\n                            ))}\r\n                            ;\r\n                          </select>\r\n                          {/* <input\r\n                        type=\"number\"\r\n                        placeholder=\"MMPRO To Unstake\"\r\n                        value={unstakeAmount}\r\n                        onChange={(e) => setUnstakeAmount(e.target.value)}\r\n                        className=\"text-white font-extrabold flex-shrink text-2xl w-full bg-transparent focus:outline-none focus:bg-white focus:text-black px-2\"\r\n                      /> */}\r\n                          <Button\r\n                            onClick={() => unstake()}\r\n                            className=\"flex flex-row items-center w-48 justify-center\"\r\n                          >\r\n                            {unstakeLoading ? (\r\n                              <Spinner size={30} />\r\n                            ) : (\r\n                              <>\r\n                                <img\r\n                                  src=\"/images/unlocked.svg\"\r\n                                  width=\"25\"\r\n                                  alt=\"\"\r\n                                />\r\n                                <span className=\"w-36\">UNSTAKE ALL</span>\r\n                              </>\r\n                            )}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Card>\r\n                  </div>\r\n                )}\r\n                {initLoading && (\r\n                  <div className=\"my-12\">\r\n                    <Spinner color=\"white\" size={100} />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","export const getFlexibleStakingAddress = () => {\r\n  return \"0x5450eaE65710b5fE19E5e20CFDeA9b9feb63fa1b\";\r\n};\r\n\r\nexport const getFixedStakingAddress = () => {\r\n  return \"0x1eDdc700755165438FAD7181AF92eE8Fb816Cd87\";\r\n};\r\n\r\nexport const getBUSDAddress = () => {\r\n  return \"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\";\r\n};\r\n\r\nexport const getMMProAddress = () => {\r\n  return \"0x6067490d05F3cF2fdFFC0e353b1f5Fd6E5CCDF70\";\r\n};\r\n","import Web3 from \"web3\";\n\nconst initWeb3 = () => {\n  return new Promise(async (resolve, reject) => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      try {\n        await window.ethereum.enable();\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } else if (window.web3) {\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } else {\n      const provider = new Web3.providers.HttpProvider(\"http://localhost:9545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n};\n\nexport { initWeb3 };\n","const getRpcUrl = () => {\r\n  return \"https://bsc-dataseed.binance.org/\";\r\n};\r\n\r\nexport default getRpcUrl;\r\n","import Web3 from 'web3'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nimport { getFlexibleStakingAddress } from '../utils/getAddress'\r\nimport MMPRO from '../contracts/MMPRO.json'\r\nimport FlexibleStake from '../contracts/FlexibleStake.json'\r\nimport getRpcUrl from '../utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 })\r\n\r\nexport const useWeb3 = () => {\r\n    const {\r\n        library\r\n    } = useWeb3React()\r\n    return new Web3(library.currentProvider || httpProvider)\r\n}\r\n\r\nconst useContract = (abi, address) => {\r\n    const {\r\n        library\r\n    } = useWeb3React()\r\n    const web3 = new Web3(library.currentProvider || httpProvider)\r\n    return new web3.eth.Contract(abi, address)\r\n}\r\n\r\nexport const useFlexibleStaking = _ => {\r\n    const abi = FlexibleStake.abi\r\n    return useContract(abi, getFlexibleStakingAddress())\r\n}\r\n","/* eslint-disable no-undef */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Button from \"../components/common/Button\";\r\nimport FlexibleStake from \"../contracts/FlexibleStake.json\";\r\nimport MMPRO from \"../contracts/MMPRO.json\";\r\nimport BUSD from \"../contracts/Busd.json\";\r\nimport {\r\n  getFlexibleStakingAddress,\r\n  getFixedStakingAddress,\r\n  getMMProAddress,\r\n  getBUSDAddress,\r\n} from \"../utils/getAddress\";\r\nimport { useFlexibleStaking } from \"../hooks/useContracts\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport SelectFlexibleToken from \"./SelectFlexibleToken\";\r\nimport FlexibleStaking from \"./FlexibleStaking\";\r\n\r\nconst stakeTokenDataList = [\r\n  {\r\n    name: \"MMPro\",\r\n    abi: MMPRO.abi,\r\n    addr: getMMProAddress(),\r\n    img: \"/images/mmpro.png\",\r\n  },\r\n  {\r\n    name: \"Busd\",\r\n    abi: BUSD.abi,\r\n    addr: getBUSDAddress(),\r\n    img: \"/images/busd.png\",\r\n  },\r\n];\r\n\r\nexport default function FlexibleLayout() {\r\n  const flexibleContract = useFlexibleStaking();\r\n  const { account, active } = useWeb3React();\r\n  const [initLoading, setInitLoading] = useState(false);\r\n  const [stakeTokenBoxList, setStakeTokenBoxList] = useState(Array);\r\n  const [flexibleAPY, setFlexibleAPY] = useState(Array);\r\n  const [totalStaked, setTotalStaked] = useState(0);\r\n  const [amount, setAmount] = useState(0);\r\n  const [curStakeTokenID, setCurStakeTokenID] = useState(-1);\r\n\r\n  const cAPY = async (index, amount, emission) => {\r\n    const totalStaked = await flexibleContract.methods\r\n      .tokenStakeInfo(stakeTokenDataList[index][\"addr\"])\r\n      .call()[2];\r\n    console.log(totalStaked);\r\n    if (totalStaked && amount) {\r\n      const shareRate = BigInt(amount * 100) / (totalStaked + BigInt(amount));\r\n      const currentRewardsPerday =\r\n        (BigInt(shareRate) * BigInt(emission)) / BigInt(100);\r\n      const estAnnualRewards = BigInt(currentRewardsPerday) * BigInt(365);\r\n      const apy = (BigInt(estAnnualRewards) * BigInt(100)) / BigInt(amount);\r\n      return apy.toString() + \"%\";\r\n    }\r\n    return \"0%\";\r\n  };\r\n\r\n  const init = async () => {\r\n    var tempStakeList = [];\r\n    for (var i = 0; i < stakeTokenDataList.length; i++) {\r\n      var stakeTokenInfo = {};\r\n      stakeTokenInfo[\"name\"] = stakeTokenDataList[i][\"name\"];\r\n      stakeTokenInfo[\"img\"] = stakeTokenDataList[i][\"img\"];\r\n      stakeTokenInfo[\"addr\"] = stakeTokenDataList[i][\"addr\"];\r\n      stakeTokenInfo[\"TVL\"] = (\r\n        await flexibleContract.methods\r\n          .tokenStakeInfo(stakeTokenDataList[i][\"addr\"])\r\n          .call()\r\n      )[2];\r\n      stakeTokenInfo[\"emission\"] = (\r\n        await flexibleContract.methods\r\n          .tokenStakeInfo(stakeTokenDataList[i][\"addr\"])\r\n          .call()\r\n      )[1];\r\n      tempStakeList.push({ ...stakeTokenInfo, id: i });\r\n    }\r\n    let tempAPY = [];\r\n    for (i = 0; i < tempStakeList.length; i++) {\r\n      const apy = await cAPY(i, amount, tempStakeList[i][\"emission\"]);\r\n      tempAPY.push({ id: i, APY: apy });\r\n    }\r\n    setFlexibleAPY(tempAPY);\r\n    setStakeTokenBoxList(tempStakeList);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initialize = async () => {\r\n      setInitLoading(true);\r\n      await init();\r\n      setInitLoading(false);\r\n    };\r\n    initialize();\r\n  }, [account, active]);\r\n\r\n  return (\r\n    <div className=\"grid grid-col-1 gap-6 w-full\">\r\n      {/* className=\"transparentCard justify-between w-auto mx-12\" */}\r\n      <div className=\"text-center\">\r\n        {initLoading === true ? (\r\n          <>loading...</>\r\n        ) : (\r\n          <>\r\n            {curStakeTokenID === -1 ? (\r\n              <SelectFlexibleToken\r\n                stakeTokenBoxList={stakeTokenBoxList}\r\n                flexibleAPY={flexibleAPY}\r\n                setCurStakeTokenID={setCurStakeTokenID}\r\n              />\r\n            ) : (\r\n              <FlexibleStaking />\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Footer from \"./components/Footer\";\r\nimport Header from \"./components/Header\";\r\nimport StakingPage from \"./pages/StakingPage\";\r\nimport Staking from \"./pages/Staking\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"w-full overflow-hidden main-gradient\">\r\n      <Header />\r\n      <StakingPage />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import \"./styles/tailwind.css\";\r\nimport \"./styles/index.css\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Web3ReactProvider } from \"@web3-react/core\";\r\nimport App from \"./App\";\r\nimport { getLibrary } from \"./wallet\";\r\n\r\nconst baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={baseUrl}>\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <App />\r\n    </Web3ReactProvider>\r\n  </BrowserRouter>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}